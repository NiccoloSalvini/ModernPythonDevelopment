<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Python Biella Group Learning Page</title>
    <link>https://pythonbiellagroup.github.io/ModernPythonDevelopment/</link>
    <description>Recent content in Home on Python Biella Group Learning Page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Mar 2021 20:10:53 +0200</lastBuildDate><atom:link href="https://pythonbiellagroup.github.io/ModernPythonDevelopment/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installare un linter</title>
      <link>https://pythonbiellagroup.github.io/ModernPythonDevelopment/visual-studio-code/linter/</link>
      <pubDate>Sun, 28 Mar 2021 23:54:10 +0200</pubDate>
      
      <guid>https://pythonbiellagroup.github.io/ModernPythonDevelopment/visual-studio-code/linter/</guid>
      <description>Come abbiamo visto i linter sono i vostri migliori amici per controllare, durante la scrittura del codice, che tutto sia ok.
Per selezionare un linter andate nei comandi (premendo il tasto F1 oppure CTRL + SHIFT + P o facendo View &amp;gt; Command Palette) e scrivete: &amp;gt; python: Select Linter . Selezionate quindi il linter che più vi piace (vi consiglio flake 8 ).</description>
    </item>
    
    <item>
      <title>Utilizzare una versione di Python</title>
      <link>https://pythonbiellagroup.github.io/ModernPythonDevelopment/visual-studio-code/python-version/</link>
      <pubDate>Sun, 28 Mar 2021 23:54:10 +0200</pubDate>
      
      <guid>https://pythonbiellagroup.github.io/ModernPythonDevelopment/visual-studio-code/python-version/</guid>
      <description>Quando siete all&amp;rsquo;interno di un progetto e aprite un file .py vi verrà chiesto di utilizzare una particolare versione di python che potete anche visualizzarla in basso a destra su vscode (ovviamente dovete installare almeno l&amp;rsquo;estensione Python prima). Premendo sulla scritta potrete selezionare una determinata versione di Python.
Aprendo sempre la Command Palette (premendo il tasto F1 oppure CTRL + SHIFT + P o facendo View &amp;gt; Command Palette ) potete scrivere : &amp;gt; python: Select Interpreter per selezionare l&amp;rsquo;interprete python che più vi aggrada (ad esempio il vostro .</description>
    </item>
    
    <item>
      <title>Aggiungere code al terminale</title>
      <link>https://pythonbiellagroup.github.io/ModernPythonDevelopment/visual-studio-code/code-terminal/</link>
      <pubDate>Sun, 28 Mar 2021 23:54:10 +0200</pubDate>
      
      <guid>https://pythonbiellagroup.github.io/ModernPythonDevelopment/visual-studio-code/code-terminal/</guid>
      <description>Una feature molto interessante di visual studio code è l&amp;rsquo;aggiunta del comando code &amp;lt;file_or_folder&amp;gt; all&amp;rsquo;interno del terminale che vi aprirà una finestra di vscode in base al file o alla cartella su cui volete lavorare (ad esempio facendo code . potrete aprire la cartella corrente all&amp;rsquo;interno di vscode).
Per farlo aprite la Command Palette e lanciate (cercando) il seguente comando: Shell command: Install ‘code’ command in the PATH
Su windows è possibile installare la funzionalità anche flaggando Add to PATH durante la fase di installazione di vscode.</description>
    </item>
    
    <item>
      <title>Usare il debugger</title>
      <link>https://pythonbiellagroup.github.io/ModernPythonDevelopment/visual-studio-code/debugger/</link>
      <pubDate>Sun, 28 Mar 2021 23:54:10 +0200</pubDate>
      
      <guid>https://pythonbiellagroup.github.io/ModernPythonDevelopment/visual-studio-code/debugger/</guid>
      <description>Per usare il debugger su vscode e quindi lanciare diversi file è possibile creare per ogni progetto una particolare configurazione di impostazioni che verranno utilizzate dal debugger.
Inoltre VSCode quando andate sulla sezione di debug mette a disposizione uno strumento che consente di generare una particolare configurazione in base al framework o funzionalità che state cercando di usare tramite un template
Con questa procedura verrà costruito un file: launch.json all&amp;rsquo;interno della directory di progetto: .</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://pythonbiellagroup.github.io/ModernPythonDevelopment/visual-studio-code/testing/</link>
      <pubDate>Sun, 28 Mar 2021 23:54:10 +0200</pubDate>
      
      <guid>https://pythonbiellagroup.github.io/ModernPythonDevelopment/visual-studio-code/testing/</guid>
      <description>Una feature nascosta all&amp;rsquo;interno di VSCode una volta installata l&amp;rsquo;estensione di Python è la possibilità di eseguire test tramite interfaccia con Python.
Per usufruire di questa funzionalità: Aprire la Command Palette e fare: Python: Configure Tests e dall&amp;rsquo;elenco dei framework di test che vi compariranno selezionare il vostro framework preferito (ad esempio pytest).</description>
    </item>
    
    <item>
      <title>Black</title>
      <link>https://pythonbiellagroup.github.io/ModernPythonDevelopment/code-style/black/</link>
      <pubDate>Sun, 28 Mar 2021 23:54:10 +0200</pubDate>
      
      <guid>https://pythonbiellagroup.github.io/ModernPythonDevelopment/code-style/black/</guid>
      <description>https://black.now.sh/
Black è un code formatter, prende i propri files e li formatta in accordo con PEP8 e PEP257 con alcune altre regole addizionali (ad esempio converte apostrofo singolo in apostrofo doppio).
Permette di essere configurato (ad esempio mettendo --skip-string-normalization per preservare gli apostrofi singoli).
Black è uno strumento molto discusso e a volte molto aggressivo, ma usandolo in un team consente di uniformare la scrittura del codice rendendolo comune.</description>
    </item>
    
    <item>
      <title>Import relativi</title>
      <link>https://pythonbiellagroup.github.io/ModernPythonDevelopment/struttura-progetto/import-relativi/</link>
      <pubDate>Sun, 28 Mar 2021 23:54:10 +0200</pubDate>
      
      <guid>https://pythonbiellagroup.github.io/ModernPythonDevelopment/struttura-progetto/import-relativi/</guid>
      <description>Esistono due modi (principali) per importare moduli in Python
 Import Assoluti: from module/models/user import get_user Import Relativi: from ..models/user import get_user  Entrambi i modi hanno vantaggi e svantaggi, personalmente consiglio l&amp;rsquo;utilizzo di Import Assoluti perchè sono più facili da leggere e da utilizzare (rendendo il codice molto più pulito e compilant).
Anche perchè se si usano import relativi è possibile incappare in questo errore:
Value Error: attempted relative import beyond top-level package</description>
    </item>
    
    <item>
      <title>Pyenv-virtualenv</title>
      <link>https://pythonbiellagroup.github.io/ModernPythonDevelopment/gestire-dipendenze/pyenv-virtualenv/</link>
      <pubDate>Sun, 28 Mar 2021 23:54:10 +0200</pubDate>
      
      <guid>https://pythonbiellagroup.github.io/ModernPythonDevelopment/gestire-dipendenze/pyenv-virtualenv/</guid>
      <description>Pyenv mette a disposizione uno strumento ancora più efficace per costruire ambienti virtuali attraverso un plugin pyenv-virtualenv
#Creare un virtualenv pyenv virtualenv 3.7.4 my-project #lista di tutti i virtual environments pyenv virtualenvs #attivare un virtualenv pyenv activate my-project #disattivare un virtualenv pyenv deactivate Oltre a virtualenv e pyenv-virtualenv ci sono altri strumenti molto utili e interessanti come:
 conda (che introduce anche il conda package manager) che è molto invasivo virtualfish virtualenvwrapper pipenv: molto citato in tantissimi tutorial, ma è veramente poco mantenuto (l&amp;rsquo;ultima versione risale al 2018 con 300+ issue aperte) e può causare diversi problemi in un progetto (oltre ad esserci diverse controversie legate al progetto: https://github.</description>
    </item>
    
    <item>
      <title>Flake8</title>
      <link>https://pythonbiellagroup.github.io/ModernPythonDevelopment/code-style/flake8/</link>
      <pubDate>Sun, 28 Mar 2021 23:54:10 +0200</pubDate>
      
      <guid>https://pythonbiellagroup.github.io/ModernPythonDevelopment/code-style/flake8/</guid>
      <description>Oltre agli strumenti che consentono di formattare il codice in Python esistono diversi linter e analizzatori statici di codice.
Uno dei più popolari Linter su Python è Flake8 .
Flake8 non cambia il codice in un progetto, ma fornisce uno strumento di warnings in real time
Flake8 combina tre progetti differenti
 pyflakes https://github.com/pycqa/pyflakes = da warnings su moduli non usati, variabili non definite, &amp;hellip; pycodestyle https://pycodestyle.pycqa.org/en/latest/ = da errori riguardo alle violazioni di PEP8 McCabe https://github.</description>
    </item>
    
    <item>
      <title>Import circolari</title>
      <link>https://pythonbiellagroup.github.io/ModernPythonDevelopment/struttura-progetto/import-circolari/</link>
      <pubDate>Sun, 28 Mar 2021 23:54:10 +0200</pubDate>
      
      <guid>https://pythonbiellagroup.github.io/ModernPythonDevelopment/struttura-progetto/import-circolari/</guid>
      <description>Import circolari Questo è un problema molto grave in un progetto e l&amp;rsquo;errore accade quando a partire da un modulo si cerca di importare l&amp;rsquo;altro e viceversa (crendo appunto una circolarità negli import).
# file_a.py from file_b import hello_world def hello(): return &amp;#34;hello&amp;#34; def first_program(): return hello_world() first_program() # file_b.py from file_a import hello def hello_world(): return hello() + &amp;#34; world&amp;#34; Quando si lancia python file_a.py si avrà il seguente errore:</description>
    </item>
    
    <item>
      <title>Poetry</title>
      <link>https://pythonbiellagroup.github.io/ModernPythonDevelopment/gestire-dipendenze/poetry/</link>
      <pubDate>Sun, 28 Mar 2021 23:54:10 +0200</pubDate>
      
      <guid>https://pythonbiellagroup.github.io/ModernPythonDevelopment/gestire-dipendenze/poetry/</guid>
      <description>https://python-poetry.org/
Poetry è un nuovo modo di gestire progetti con Python che si adatta ai linguaggi e ai framework moderni più famosi (come ad esempio node con npm o nuget per .NET)
È a tutti gli effetti un package and dependency management tool che consente quindi di gestire pacchetti, dipendenze, versioni unendo sia la gestione della versione di python in un determinato progetto con le rispettive dipendenze oltre ad introdurre concetti molto più avanzati.</description>
    </item>
    
    <item>
      <title>Bandit</title>
      <link>https://pythonbiellagroup.github.io/ModernPythonDevelopment/code-style/bandit/</link>
      <pubDate>Sun, 28 Mar 2021 23:54:10 +0200</pubDate>
      
      <guid>https://pythonbiellagroup.github.io/ModernPythonDevelopment/code-style/bandit/</guid>
      <description>Bandit è uno strumento per trovare problemi di sicurezza più comuni all&amp;rsquo;interno del codice Python.
Utilizzandolo così com&amp;rsquo;è però, senza un&amp;rsquo;adeguata configurazione, fornisce anche un po&#39; di falsi positivi.
Spendendo un po&#39; di tempo a configurarlo correttamente per i vostri progetti è possibile avere informazioni utili riguardo:
 utilizzo insicuro di alcuni moduli possibili SQL Injection se il codice ignora silenziosamente alcune eccezioni e molto altro  È un utilissimo strumento soprattutto per principianti per revisionare il proprio codice.</description>
    </item>
    
    <item>
      <title>cookiecutter</title>
      <link>https://pythonbiellagroup.github.io/ModernPythonDevelopment/struttura-progetto/cookiecutter/</link>
      <pubDate>Sun, 28 Mar 2021 23:54:10 +0200</pubDate>
      
      <guid>https://pythonbiellagroup.github.io/ModernPythonDevelopment/struttura-progetto/cookiecutter/</guid>
      <description>Tornando al discorso originale di struttura di progetto in python (e in tanti altri linguaggi e/o framework) ogni progetto è differente, ma alcuni progetti condividono tra di loro alcuni elementi comuni.
Ad esempio spesso hanno un file con una lista di dipendenze e alcuni test, un&amp;rsquo;applicazione web ha bisogno di un &amp;ldquo;main&amp;rdquo;, oppure abbiamo bisogno per il nostro team di avere una struttura che guidi lo sviluppo in modo da uniformarci tra diversi progetti (o almeno cercare di farlo).</description>
    </item>
    
    <item>
      <title>Pipx</title>
      <link>https://pythonbiellagroup.github.io/ModernPythonDevelopment/gestire-dipendenze/pipx/</link>
      <pubDate>Sun, 28 Mar 2021 23:54:10 +0200</pubDate>
      
      <guid>https://pythonbiellagroup.github.io/ModernPythonDevelopment/gestire-dipendenze/pipx/</guid>
      <description>È vero che ogni progetto dovrebbe sempre avere le proprie dipendenze e vivere in maniera atomica e indipendente rispetto agli altri progetti.
Tuttavia ci sono alcune librerie che possono essere globali su tutta la macchina e su tutto il sistema.
Alcune di queste librerie sono quelle che servono per gestire la qualità del codice o lo stile, come ad esempio black o flake8
Ecco quindi che viene in soccorso pipx che consente di installare queste librerie globali e usarle globalmente su tutta la macchina.</description>
    </item>
    
  </channel>
</rss>
