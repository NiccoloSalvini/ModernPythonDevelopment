<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Struttura di progetto on Python Biella Group Learning Page</title>
    <link>https://pythonbiellagroup.github.io/ModernPythonDevelopment/struttura-progetto/</link>
    <description>Recent content in Struttura di progetto on Python Biella Group Learning Page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Mar 2021 20:10:53 +0200</lastBuildDate><atom:link href="https://pythonbiellagroup.github.io/ModernPythonDevelopment/struttura-progetto/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Import relativi</title>
      <link>https://pythonbiellagroup.github.io/ModernPythonDevelopment/struttura-progetto/import-relativi/</link>
      <pubDate>Sun, 28 Mar 2021 23:54:10 +0200</pubDate>
      
      <guid>https://pythonbiellagroup.github.io/ModernPythonDevelopment/struttura-progetto/import-relativi/</guid>
      <description>Esistono due modi (principali) per importare moduli in Python
 Import Assoluti: from module/models/user import get_user Import Relativi: from ..models/user import get_user  Entrambi i modi hanno vantaggi e svantaggi, personalmente consiglio l&amp;rsquo;utilizzo di Import Assoluti perchè sono più facili da leggere e da utilizzare (rendendo il codice molto più pulito e compilant).
Anche perchè se si usano import relativi è possibile incappare in questo errore:
Value Error: attempted relative import beyond top-level package</description>
    </item>
    
    <item>
      <title>Import circolari</title>
      <link>https://pythonbiellagroup.github.io/ModernPythonDevelopment/struttura-progetto/import-circolari/</link>
      <pubDate>Sun, 28 Mar 2021 23:54:10 +0200</pubDate>
      
      <guid>https://pythonbiellagroup.github.io/ModernPythonDevelopment/struttura-progetto/import-circolari/</guid>
      <description>Import circolari Questo è un problema molto grave in un progetto e l&amp;rsquo;errore accade quando a partire da un modulo si cerca di importare l&amp;rsquo;altro e viceversa (crendo appunto una circolarità negli import).
# file_a.py from file_b import hello_world def hello(): return &amp;#34;hello&amp;#34; def first_program(): return hello_world() first_program() # file_b.py from file_a import hello def hello_world(): return hello() + &amp;#34; world&amp;#34; Quando si lancia python file_a.py si avrà il seguente errore:</description>
    </item>
    
    <item>
      <title>cookiecutter</title>
      <link>https://pythonbiellagroup.github.io/ModernPythonDevelopment/struttura-progetto/cookiecutter/</link>
      <pubDate>Sun, 28 Mar 2021 23:54:10 +0200</pubDate>
      
      <guid>https://pythonbiellagroup.github.io/ModernPythonDevelopment/struttura-progetto/cookiecutter/</guid>
      <description>Tornando al discorso originale di struttura di progetto in python (e in tanti altri linguaggi e/o framework) ogni progetto è differente, ma alcuni progetti condividono tra di loro alcuni elementi comuni.
Ad esempio spesso hanno un file con una lista di dipendenze e alcuni test, un&amp;rsquo;applicazione web ha bisogno di un &amp;ldquo;main&amp;rdquo;, oppure abbiamo bisogno per il nostro team di avere una struttura che guidi lo sviluppo in modo da uniformarci tra diversi progetti (o almeno cercare di farlo).</description>
    </item>
    
  </channel>
</rss>
